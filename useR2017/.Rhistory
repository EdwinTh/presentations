knitr::opts_chunk$set(echo = TRUE)
get_interval(one_week_of_traffic)
library(padr)
get_interval(one_week_of_traffic)
get_interval(one_week_of_traffic$time_stamp)
---
title: "useR2017"
author: "Edwin Thoen"
date: "5/26/2017"
output: ioslides_presentation
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
```{r, echo = FALSE}
library(tidyverse)
library(padr)
towns <- emergency %>%
filter(title == "Traffic: VEHICLE ACCIDENT -") %>% count(twp) %>% arrange(n %>% desc) %>% head(4)
one_week_of_traffic <- emergency %>%
filter(title == "Traffic: VEHICLE ACCIDENT -") %>%
thicken("week", "w") %>%
filter(w == as.Date("2016-07-10")) %>%
filter(twp %in% towns$twp) %>%
select(-w)
```
## Slide 3
```{r, echo = FALSE, message=FALSE}
one_week_of_traffic %>%
thicken("6 hour", "h6") %>%
count(twp, h6) %>%
mutate(n = as.integer(n)) %>%
pad() %>%
fill_by_value() %>%
mutate(hr = lubridate::hour(h6)) %>%
mutate(daypart = ifelse(hr == 0, "Night",
ifelse(hr == 6, "Morning",
ifelse(hr == 12, "Afternoon", "Evening"))) %>%
forcats::fct_relevel(c("Night", "Morning", "Afternoon", "Evening"))) %>%
ggplot(aes(h6, n)) +
geom_line() +
geom_point(aes(col = daypart)) +
facet_wrap(~twp) +
ggtitle("Number of traffice accidents in four neighbourhoods") +
xlab("") + ylab("")
```
## Slide 4
```{r}
head(one_week_of_traffic) %>% select(title, time_stamp, twp)
```
## Slide 8
```{r}
get_interval(one_week_of_traffic$time_stamp)
```
get_interval(as.Date(c("2017-07-01", "2017-07-03", "2017-07-07")))
one_week_of_traffic %>%
thicken("6 hour")
one_week_of_traffic <- emergency %>%
filter(title == "Traffic: VEHICLE ACCIDENT -") %>%
thicken("week", "w") %>%
filter(w == as.Date("2016-07-10")) %>%
filter(twp %in% towns$twp) %>%
select(title, time_stamp, twp)
one_week_of_traffic %>%
thicken("6 hour", "h6") %>%
count(twp, h6) %>%
mutate(n = as.integer(n)) %>%
pad() %>%
fill_by_value() %>%
mutate(hr = lubridate::hour(h6)) %>%
mutate(daypart = ifelse(hr == 0, "Night",
ifelse(hr == 6, "Morning",
ifelse(hr == 12, "Afternoon", "Evening"))) %>%
forcats::fct_relevel(c("Night", "Morning", "Afternoon", "Evening"))) %>%
ggplot(aes(h6, n)) +
geom_line() +
geom_point(aes(col = daypart)) +
facet_wrap(~twp) +
ggtitle("Number of traffice accidents in four neighbourhoods") +
xlab("") + ylab("")
head(one_week_of_traffic)
get_interval(one_week_of_traffic$time_stamp)
get_interval(as.Date(c("2017-07-01", "2017-07-03", "2017-07-07")))
one_week_of_traffic %>%
thicken("6 hour")
one_week_of_traffic %>%
thicken("6 hour") %>%
count(twp, time_stamp_6_hour)
one_week_of_traffic %>%
thicken("6 hour") %>%
count(twp, time_stamp_6_hour) %>%
pad()
mapping <- c("Night", "Morning", "Afternoon", "Evening")
names(mapping) <- c(0, 6, 12, 18)
mapping
mapping[as.character(6)]
mapping <- c("Night", "Morning", "Afternoon", "Evening")
names(mapping) <- c(0, 6, 12, 18)
one_week_of_traffic %>%
thicken("6 hour", "h6") %>%
count(twp, h6) %>%
mutate(n = as.integer(n)) %>%
pad() %>%
fill_by_value() %>%
mutate(hr = lubridate::hour(h6)) %>%
mutate(daypart = mapping[as.character(hour)]) %>%
# forcats::fct_relevel(c("Night", "Morning", "Afternoon", "Evening"))) %>%
ggplot(aes(h6, n)) +
geom_line() +
geom_point(aes(col = daypart)) +
facet_wrap(~twp) +
ggtitle("Number of traffice accidents in four neighbourhoods") +
xlab("") + ylab("")
one_week_of_traffic %>%
thicken("6 hour", "h6") %>%
count(twp, h6) %>%
mutate(n = as.integer(n)) %>%
pad() %>%
fill_by_value() %>%
mutate(hr = lubridate::hour(h6)) %>%
mutate(daypart = mapping[as.character(hr)]) %>%
# forcats::fct_relevel(c("Night", "Morning", "Afternoon", "Evening"))) %>%
ggplot(aes(h6, n)) +
geom_line() +
geom_point(aes(col = daypart)) +
facet_wrap(~twp) +
ggtitle("Number of traffice accidents in four neighbourhoods") +
xlab("") + ylab("")
mapping <- c("Night", "Morning", "Afternoon", "Evening")
names(mapping) <- c(0, 6, 12, 18)
one_week_of_traffic %>%
thicken("6 hour", "h6") %>%
count(twp, h6) %>%
mutate(n = as.integer(n)) %>%
pad() %>%
fill_by_value() %>%
mutate(hr = lubridate::hour(h6)) %>%
mutate(daypart = mapping[as.character(hr)] %>%
forcats::fct_relevel(mapping)) %>%
ggplot(aes(h6, n)) +
geom_line() +
geom_point(aes(col = daypart)) +
facet_wrap(~twp) +
ggtitle("Number of traffice accidents in four neighbourhoods") +
xlab("") + ylab("")
one_week_of_traffic %>%
thicken("6 hour", "h6") %>%
count(twp, h6) %>%
mutate(n = as.integer(n)) %>%
pad(start_val = as.POSIXct("2017-07-10 00:00:00")) %>%
fill_by_value() %>%
mutate(hr = lubridate::hour(h6)) %>%
mutate(daypart = mapping[as.character(hr)] %>%
forcats::fct_relevel(mapping)) %>%
ggplot(aes(h6, n)) +
geom_line() +
geom_point(aes(col = daypart)) +
facet_wrap(~twp) +
ggtitle("Number of traffice accidents in four neighbourhoods") +
xlab("") + ylab("")
one_week_of_traffic %>%
thicken("6 hour", "h6") %>%
count(twp, h6) %>%
mutate(n = as.integer(n)) %>%
pad(start_val = as.POSIXct("2016-07-10 00:00:00")) %>%
fill_by_value() %>%
mutate(hr = lubridate::hour(h6)) %>%
mutate(daypart = mapping[as.character(hr)] %>%
forcats::fct_relevel(mapping)) %>%
ggplot(aes(h6, n)) +
geom_line() +
geom_point(aes(col = daypart)) +
facet_wrap(~twp) +
ggtitle("Number of traffice accidents in four neighbourhoods") +
xlab("") + ylab("")
```{r, eval=FALSE, message=FALSE}
mapping <- c("Night", "Morning", "Afternoon", "Evening")
names(mapping) <- c(0, 6, 12, 18)
one_week_of_traffic %>%
thicken("6 hour", "h6") %>%
count(twp, h6) %>%
mutate(n = as.integer(n)) %>%
pad(start_val = as.POSIXct("2016-07-10 00:00:00")) %>%
fill_by_value() %>%
mutate(hr = lubridate::hour(h6)) %>%
mutate(daypart = mapping[as.character(hr)] %>%
forcats::fct_relevel(mapping)) %>%
ggplot(aes(h6, n)) +
geom_line() +
geom_point(aes(col = daypart)) +
facet_wrap(~twp) +
ggtitle("Number of traffice accidents in four neighbourhoods") +
xlab("") + ylab("")
thicken
knitr::opts_chunk$set(echo = TRUE)
head(one_week_of_traffic)
library(tidyverse)
library(tidyverse)
library(padr)
towns <- emergency %>%
filter(title == "Traffic: VEHICLE ACCIDENT -") %>% count(twp) %>% arrange(n %>% desc) %>% head(4)
one_week_of_traffic <- emergency %>%
filter(title == "Traffic: VEHICLE ACCIDENT -") %>%
thicken("week", "w") %>%
filter(w == as.Date("2016-07-10")) %>%
filter(twp %in% towns$twp) %>%
select(title, time_stamp, twp)
head(one_week_of_traffic)
head(one_week_of_traffic, 10)
get_interval(one_week_of_traffic$time_stamp)
get_interval(as.Date(c("2017-07-01", "2017-07-03", "2017-07-07")))
get_interval(as.Date(c("2017-07-01", "2017-07-03", "2017-07-06")))
fib_exp <- function(n) {
if (n == 0) return(0)
if (n == 1) return(1)
return(fib_exp(n-1) + fib_exp(n-2))
}
fib_exp(3)
fib_exp <- function(n) {
if (n == 1) return(0)
if (n == 2) return(1)
return(fib_exp(n-1) + fib_exp(n-2))
}
fib_exp(3)
fib_exp(8)
fib_exp(9)
fib_exp(20)
fib_exp(30)
system.time(fib_exp(30))
fib_exp(1:4)
fib_exp <- function(n) {
case_when(n == 1 ~ 0,
n == 2 ~ 1,
TRUE ~ fib_exp(n-1) + fib_exp(n-2))
}
system.time(fib_exp(30))
fib_exp <- function(n) {
if (n == 1) return(0)
if (n == 2) return(1)
return(fib_exp(n-1) + fib_exp(n-2))
}
system.time(fib_exp(30))
library(tidyverse)
system.time(fib_exp(30))
system.time(fib_exp(1))
system.time(fib_exp(10))
system.time(fib_exp(10)) %>% dim
system.time(fib_exp(10)) %>% length
system.time(fib_exp(10))
system.time(fib_exp(15))
system.time(fib_exp(20))
system.time(fib_exp(20))[1]
system.time(fib_exp(20))[3]
system.time(fib_exp(20))[3]
system.time(fib_exp(20))[3]
system.time(fib_exp(20))[3]
system.time(fib_exp(20))[3]
system.time(fib_exp(20))[3]
system.time(fib_exp(20))[3]
system.time(fib_exp(20))[3]
system.time(fib_exp(20))[3]
library(tidyverse)
exponential_time <- data_frame(n = 1:40, time = 0)
exponential_time
exponential_time <- data_frame(n = 1:40, time = 0)
for (i in 1:40) {
exponential_time[i, 2] <- system.time(fib_exp(i))[3]
}
exponential_time <- data_frame(n = 1:40, time = 0)
for (i in 1:30) {
exponential_time[i, 2] <- system.time(fib_exp(i))[3]
}
ggplot(exponential_time, aes(n, time)) +
geom_line() +
ggtitle("Computation time of the recursive implementation")
exponential_time <- data_frame(n = 1:30, time = 0)
for (i in 1:30) {
exponential_time[i, 2] <- system.time(fib_exp(i))[3]
}
ggplot(exponential_time, aes(n, time)) +
geom_line() +
ggtitle("Computation time of the recursive implementation")
5L
5L / 2
z <- c("a" = 1, "b" = 2)
z$a
x <- matrix(1:9, 3, 3)
x
colnames(x) <- letters[1:3]
x["b"]
x[b]
x[, 'b']
x[, 4]
x[, 3]
x[c(TRUE, FALSE, FALSE), 1]
x[c(TRUE, FALSE, TRUE), 1]
x[c(TRUE, FALSE, TRUE), 1:2]
x[, "a"]
[
str([)
str(`[``)
str(`[`)
class(`[`)
x[1:2, , drop = FALSE]
x[1:2,1 , drop = FALSE]
x[1:2, 1, drop = FALSE]
x[c(3, 2, 8)]
x <- matrix(round(rnorm(9), 1), 3, 3)
x
ind_mat <- matrix(c(1, 1, 3, 2, 3, 2), nrow = 2)
x[ind_mat]
ind_mat
ind_mat <- matrix(c(1, 1, 3, 2, 3, 2), nrow = 3)
x[ind_mat]
x <- head(mtcars, 3)
x["cyl"]
x[, "cyl"]
NA
1:5[NA]
(1:5)[NA]
(1:5)[NA_real_]
x <- outer(1:5, 1:5, FUN = "*")
x[upper.tri(x)]
x
dim(x)
n <- x %>% dim %>% min
ind_mat <- matrix(rep(1:n, 2), ncol = 2)
my_diag <- function(x) {
n <- x %>% dim %>% min
ind_mat <- matrix(rep(1:n, 2), ncol = 2)
x[ind_mat]
}
my_diag(x)
x
mtcars[[5]]
(1:4)[[4]]
a <- list("jos" = 42)
a[["jos"]]
a[[1]]
mtcars[,1]
mtcars[1]
mtcars$cy
mtcars$c
mtcars$mp
mtcars$m
x[5]
x <- 1:4
x[5]
x[NA]
x[NA_real_]
x[NULL]
mod <- lm(mpg ~ wt, data = mtcars)
str(mod)
mod$df.residual
str(mod)
str(mod) %>% str
summary(mod) %>% str
summary(mod)$r.squared
x[2:3] <- c("jos", "jos")
x
x <- 1:5
x[2:3] <- c("jos", "jos")
x
x[2:3] <- 3:2
x
x <- 1:5
x[2:3] <- 3:2
x
x[2] <- 4:5
x[2:3] <- 4
x[2:3] <- 4
x
x[2] <- 4:5
x[2:3] <- 4
x[c(2,2)] <- 4:5
x
mtcars[]
mtcars[]
mtcars[] <- lapply(mtcars, as.integer)
mtcars
mtcars <- lapply(mtcars, as.integer)
mtcars
mtcars[1:2, 1:2][] <- lapply(mtcars, as.integer)
rm(mtcars)
a <- mtcars[1:2, 1:2]
a[] <- lapply(mtcars, as.integer)
a
a <- lapply(mtcars, as.integer)
a
a <- mtcars[1:2, 1:2]
a[] <- lapply(a, as.integer)
a
a <- lapply(a, as.integer)
a
a["cyl"] <- NULL
a
a["mpg"] <- list(NULL)
a
list(NULL)
list("jos")
a["mpg"] <- list("jos")
a
a["mpg"] <- list("jos", "henk")
names(lookup) <- c("Nl", "De")
lookup <- c("the Netherlands", "Germany")
names(lookup) <- c("Nl", "De")
some_char_vec <- sample(c("Nl", "De"), 20, TRUE)
some_char_vec <- sample(c("Nl", "De"), 10, TRUE)
lookup[some_char_vec]
some_char_vec
some_char_vec <- sample(c("Nl", "De"), 10, TRUE)
lookup[some_char_vec]
some_char_vec <- sample(c("Nl", "De"), 10, TRUE)
lookup[some_char_vec]
lookup[some_char_vec] %>% unname
?match
sample(1:10)
seq_along(mtcars)
permute_cols <- function(x) x[sample(seq_along(x))]
permute_cols(mtcars)
permute_cols(mtcars) %>% permute_cols()
permute_cols(mtcars) %>% permute_cols()
permute_cols(mtcars) %>% permute_cols()
permute_cols(mtcars) %>% permute_cols()
permute_cols(mtcars) %>% permute_cols()
permute_cols(mtcars) %>% permute_cols()
permute_cols <- function(x) x[sample(1:nrow(x)) ,sample(seq_along(x))]
permute_both <- function(x) x[sample(1:nrow(x)) ,sample(seq_along(x))]
mtcars %>% permute_both()
mtcars %>% permute_both()
mtcars %>% permute_both()
length(x)
x = mtcars
length(x)
nrow(x)
sample_cont_rows <- function(x, m) {
stopifnot(is.data.frame(x))
stopifnot(nrow(x) < m)
max_start <- nrow(x) - m + 1
start <- sample(1:max_start, 1)
x[seq(start, length.out = m), ]
}
sample_cont_rows(mtcars, 5)
sample_cont_rows <- function(x, m) {
stopifnot(is.data.frame(x))
stopifnot(nrow(x) > m)
max_start <- nrow(x) - m + 1
start <- sample(1:max_start, 1)
x[seq(start, length.out = m), ]
}
sample_cont_rows(mtcars, 10)
sample_cont_rows(mtcars, 10)
sample_cont_rows(mtcars, 10)
sample_cont_rows(mtcars, 10)
sample_cont_rows(mtcars, 10)
sample_cont_rows(mtcars, 10)
sample_cont_rows(mtcars, 10)
sample_cont_rows(mtcars, 10)
sample_cont_rows(mtcars, 32)
sample_cont_rows(mtcars, 31)
sample_cont_rows(mtcars, 31)
sample_cont_rows(mtcars, 31)
sample_cont_rows(mtcars, 31)
sample_cont_rows(mtcars, 31)
names(x)
names(x) %>% order
x[names(x) %>% order]
x[names(x) %>% sort]
nl_ge_info <- data.frame(abbr = c("Nl", "De"),
language = c("Dutch", "German"),
inhabitants = c(17, 82),
type_of_country = c("Awesome", "Boring"))
match(some_char_vec, nl_ge_info$abbr)
some_char_vec <- sample(c("Nl", "De"), 10, TRUE)
match(some_char_vec, nl_ge_info$abbr)
nl_ge_info[match(some_char_vec, nl_ge_info$abbr), ]
